name: passages-signup CI

on:
  pull_request:
  push:
  schedule:
    # once a day at 08:00
    - cron: "0 8 * * *"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    services:
      postgres:
        image: postgres:12.0
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          # will assign a random free host port
          - 5432/tcp
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Install Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.13.x

      - name: Install Golint
        run: go get -u golang.org/x/lint/golint

      - name: Install tooling from Apt
        # Postgres runs in a container, but we also need the client-side
        # tooling.
        run: sudo apt-get install postgresql-client

      - uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Debug
        run: |
          echo "github.ref=${{ github.ref }}"
          echo "go env GOPATH=$(go env GOPATH)"
          echo "pwd=$(pwd)"
          echo "HOME=${HOME}"
          echo "GITHUB_WORKSPACE=${GITHUB_WORKSPACE}"

      - name: "Go: Install"
        run: go install

      - name: "Create database: passages-signup-test"
        run: createdb passages-signup-test
        env:
          PGHOST: localhost
          PGPORT: ${{ job.services.postgres.ports[5432] }}
          PGUSER: postgres
          PGPASSWORD: postgres
          PGDATABASE: postgres

      - name: "Raise database schema"
        run: psql passages-signup-test < schema.sql
        env:
          PGHOST: localhost
          PGPORT: ${{ job.services.postgres.ports[5432] }}
          PGUSER: postgres
          PGPASSWORD: postgres
          PGDATABASE: postgres

      - name: "Go: Test"
        run: go test -v
        env:
          PGHOST: localhost
          PGPORT: ${{ job.services.postgres.ports[5432] }}
          PGUSER: postgres
          PGPASSWORD: postgres
          PGDATABASE: postgres

      - name: "Go: Vet"
        run: go vet

      - name: "Check: Gofmt"
        run: scripts/check_gofmt.sh

      - name: "Check: Golint"
        run: "$(go env GOPATH)/bin/golint -set_exit_status"

  deploy-google-cloud-run:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: "GCP: setup-gcloud"
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '285.0.0'
          project_id: passages-signup
          service_account_email: ${{ secrets.GCPEmail }}
          service_account_key: ${{ secrets.GCPKey }}
          export_default_credentials: true
        if: github.ref == 'refs/heads/master'

      - name: "GCP: gcloud info"
        run: gcloud info
        if: github.ref == 'refs/heads/master'

      - name: "GCP: Publish image"
        run: gcloud builds submit --tag gcr.io/passages-signup/passages-signup
        if: github.ref == 'refs/heads/master'

      - name: "GCP: Deploy nanoglyph-signup"
        run: gcloud run deploy --image gcr.io/passages-signup/passages-signup --platform managed --region us-central1 nanoglyph-signup
        if: github.ref == 'refs/heads/master'

      - name: "GCP: Deploy passages-signup"
        run: gcloud run deploy --image gcr.io/passages-signup/passages-signup --platform managed --region us-central1 passages-signup
        if: github.ref == 'refs/heads/master'

  image-push-docker-hub:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: 'Checkout'
        uses: actions/checkout@master

      - name: "Docker Hub: Publish image"
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: brandur/passages-signup
          username: ${{ secrets.DockerHubUsername }}
          password: ${{ secrets.DockerHubPassword }}

  terraform:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: 'Checkout'
        uses: actions/checkout@master

      - name: "Copy .tfvars"
        run: cp ./deploy/terraform/terraform.tfvars.sample ./deploy/terraform/terraform.tfvars

      - name: "Terraform: Format"
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: "latest"
          tf_actions_subcommand: "fmt"
          tf_actions_working_dir: "./deploy/terraform"

      - name: 'Terraform: Init'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: "latest"
          tf_actions_subcommand: "init"
          tf_actions_working_dir: "./deploy/terraform"

      - name: "Terraform: Validate"
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: "latest"
          tf_actions_subcommand: "validate"
          tf_actions_working_dir: "./deploy/terraform"

      # Requires working CloudFlare/Digital Ocean keys.
      # - name: "Terraform Plan"
      #   uses: hashicorp/terraform-github-actions@master
      #   with:
      #     tf_actions_version: "latest"
      #     tf_actions_subcommand: "plan"
      #     tf_actions_working_dir: "./deploy/terraform"
